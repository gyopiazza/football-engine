/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/client.js":
/*!***********************!*\
  !*** ./src/client.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var solid_js_web__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! solid-js/web */ \"./node_modules/solid-js/web/dist/web.js\");\n/* harmony import */ var solid_js_web__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! solid-js/web */ \"./node_modules/solid-js/dist/solid.js\");\n/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./store */ \"./src/store.js\");\n\n\n\n\n\n\nconst _tmpl$ = (0,solid_js_web__WEBPACK_IMPORTED_MODULE_0__.template)(`<main><button>load</button><h1>Schemas</h1><ul></ul><hr><pre></pre></main>`, 11),\n      _tmpl$2 = (0,solid_js_web__WEBPACK_IMPORTED_MODULE_0__.template)(`<button>cancel editing</button>`, 2),\n      _tmpl$3 = (0,solid_js_web__WEBPACK_IMPORTED_MODULE_0__.template)(`<li></li>`, 2);\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\nvar Main = function Main() {\n  var _useState = (0,_store__WEBPACK_IMPORTED_MODULE_1__.useState)(),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      _useState2$ = _useState2[1],\n      loadData = _useState2$.loadData,\n      setState = _useState2$.setState;\n\n  return function () {\n    var _el$ = _tmpl$.cloneNode(true),\n        _el$2 = _el$.firstChild,\n        _el$3 = _el$2.nextSibling,\n        _el$4 = _el$3.nextSibling,\n        _el$5 = _el$4.nextSibling,\n        _el$6 = _el$5.nextSibling;\n\n    _el$2.__click = loadData;\n\n    (0,solid_js_web__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$, function () {\n      var _c$ = (0,solid_js_web__WEBPACK_IMPORTED_MODULE_0__.memo)(function () {\n        return !!(state.selectedSchema.name || state.selectedRecord.id);\n      }, true);\n\n      return function () {\n        return _c$() && function () {\n          var _el$7 = _tmpl$2.cloneNode(true);\n\n          _el$7.__click = cancelEditing;\n          return _el$7;\n        }();\n      };\n    }(), _el$3);\n\n    (0,solid_js_web__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$4, function () {\n      return Object.keys(state.schemas).map(function (schema) {\n        return function () {\n          var _el$8 = _tmpl$3.cloneNode(true);\n\n          _el$8.__click = setSelectedSchema;\n          _el$8.__clickData = state.schemas[schema];\n\n          (0,solid_js_web__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$8, function () {\n            return state.selectedSchema.name === schema ? '-> ' + schema : schema;\n          });\n\n          return _el$8;\n        }();\n      });\n    });\n\n    (0,solid_js_web__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$, function () {\n      var _c$2 = (0,solid_js_web__WEBPACK_IMPORTED_MODULE_0__.memo)(function () {\n        return !!state.selectedSchema.name;\n      }, true);\n\n      return function () {\n        return _c$2() && (0,solid_js_web__WEBPACK_IMPORTED_MODULE_2__.createComponent)(EditSchema, {\n          get selectedSchema() {\n            return state.selectedSchema;\n          },\n\n          get selectedRecord() {\n            return state.selectedRecord;\n          },\n\n          get records() {\n            return state.records[(state.selectedSchema.name || '').toLowerCase()] || [];\n          }\n\n        });\n      };\n    }(), _el$5);\n\n    (0,solid_js_web__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$6, function () {\n      return JSON.stringify(state, null, 2);\n    });\n\n    return _el$;\n  }();\n};\n\nvar App = function App() {\n  return (0,solid_js_web__WEBPACK_IMPORTED_MODULE_2__.createComponent)(_store__WEBPACK_IMPORTED_MODULE_1__.AppProvider, {\n    count: 7,\n\n    get children() {\n      return (0,solid_js_web__WEBPACK_IMPORTED_MODULE_2__.createComponent)(Main, {});\n    }\n\n  });\n};\n\n(0,solid_js_web__WEBPACK_IMPORTED_MODULE_0__.render)(App, document.getElementById(\"app\"));\n\n(0,solid_js_web__WEBPACK_IMPORTED_MODULE_0__.delegateEvents)([\"click\"]);\n\n//# sourceURL=webpack://hello-express/./src/client.js?");

/***/ }),

/***/ "./src/store.js":
/*!**********************!*\
  !*** ./src/store.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AppProvider\": () => /* binding */ AppProvider,\n/* harmony export */   \"useState\": () => /* binding */ useState\n/* harmony export */ });\n/* harmony import */ var solid_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! solid-js */ \"./node_modules/solid-js/dist/solid.js\");\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n // import config from \"./config\";\n\nvar AppContext = (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.createContext)([{\n  selectedSchema: {},\n  selectedRecord: {},\n  schemas: [],\n  records: {}\n}, {}]);\nvar AppProvider = function AppProvider(props) {\n  var _createState = (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.createState)({\n    selectedSchema: props.selectedSchema || {},\n    selectedRecord: props.selectedRecord || {},\n    schemas: props.schemas || [],\n    records: props.records || {}\n  }),\n      _createState2 = _slicedToArray(_createState, 2),\n      state = _createState2[0],\n      setState = _createState2[1];\n\n  var store = [state, {\n    cancelEditing: function cancelEditing() {\n      setState(function (state) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          selectedSchema: {},\n          selectedRecord: {}\n        });\n      });\n    },\n    loadData: function loadData() {\n      fetch('/api').then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        return setState(function (state) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            schemas: response.schemas,\n            records: response.records\n          });\n        });\n      });\n    },\n    setState: setState\n  }];\n  return (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(AppContext.Provider, {\n    value: store,\n\n    get children() {\n      return props.children;\n    }\n\n  });\n};\nfunction useState() {\n  return (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(AppContext);\n}\n\n//# sourceURL=webpack://hello-express/./src/store.js?");

/***/ }),

/***/ "./node_modules/solid-js/dist/solid.js":
/*!*********************************************!*\
  !*** ./node_modules/solid-js/dist/solid.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"$RAW\": () => /* binding */ $RAW,\n/* harmony export */   \"ErrorBoundary\": () => /* binding */ ErrorBoundary,\n/* harmony export */   \"For\": () => /* binding */ For,\n/* harmony export */   \"Index\": () => /* binding */ Index,\n/* harmony export */   \"Match\": () => /* binding */ Match,\n/* harmony export */   \"Show\": () => /* binding */ Show,\n/* harmony export */   \"Suspense\": () => /* binding */ Suspense,\n/* harmony export */   \"SuspenseList\": () => /* binding */ SuspenseList,\n/* harmony export */   \"Switch\": () => /* binding */ Switch,\n/* harmony export */   \"assignProps\": () => /* binding */ assignProps,\n/* harmony export */   \"awaitSuspense\": () => /* binding */ awaitSuspense,\n/* harmony export */   \"batch\": () => /* binding */ batch,\n/* harmony export */   \"cancelCallback\": () => /* binding */ cancelCallback,\n/* harmony export */   \"createComponent\": () => /* binding */ createComponent,\n/* harmony export */   \"createComputed\": () => /* binding */ createComputed,\n/* harmony export */   \"createContext\": () => /* binding */ createContext,\n/* harmony export */   \"createDeferred\": () => /* binding */ createDeferred,\n/* harmony export */   \"createEffect\": () => /* binding */ createEffect,\n/* harmony export */   \"createMemo\": () => /* binding */ createMemo,\n/* harmony export */   \"createMutable\": () => /* binding */ createMutable,\n/* harmony export */   \"createRenderEffect\": () => /* binding */ createRenderEffect,\n/* harmony export */   \"createResource\": () => /* binding */ createResource,\n/* harmony export */   \"createResourceState\": () => /* binding */ createResourceState,\n/* harmony export */   \"createRoot\": () => /* binding */ createRoot,\n/* harmony export */   \"createSelector\": () => /* binding */ createSelector,\n/* harmony export */   \"createSignal\": () => /* binding */ createSignal,\n/* harmony export */   \"createState\": () => /* binding */ createState,\n/* harmony export */   \"equalFn\": () => /* binding */ equalFn,\n/* harmony export */   \"getContextOwner\": () => /* binding */ getContextOwner,\n/* harmony export */   \"getListener\": () => /* binding */ getListener,\n/* harmony export */   \"indexArray\": () => /* binding */ indexArray,\n/* harmony export */   \"lazy\": () => /* binding */ lazy,\n/* harmony export */   \"mapArray\": () => /* binding */ mapArray,\n/* harmony export */   \"on\": () => /* binding */ on,\n/* harmony export */   \"onCleanup\": () => /* binding */ onCleanup,\n/* harmony export */   \"onError\": () => /* binding */ onError,\n/* harmony export */   \"onMount\": () => /* binding */ onMount,\n/* harmony export */   \"produce\": () => /* binding */ produce,\n/* harmony export */   \"reconcile\": () => /* binding */ reconcile,\n/* harmony export */   \"requestCallback\": () => /* binding */ requestCallback,\n/* harmony export */   \"serializeGraph\": () => /* binding */ serializeGraph,\n/* harmony export */   \"splitProps\": () => /* binding */ splitProps,\n/* harmony export */   \"untrack\": () => /* binding */ untrack,\n/* harmony export */   \"unwrap\": () => /* binding */ unwrap,\n/* harmony export */   \"useContext\": () => /* binding */ useContext,\n/* harmony export */   \"useTransition\": () => /* binding */ useTransition\n/* harmony export */ });\nlet taskIdCounter = 1,\n    isCallbackScheduled = false,\n    isPerformingWork = false,\n    taskQueue = [],\n    currentTask = null,\n    shouldYieldToHost = null,\n    yieldInterval = 5,\n    deadline = 0,\n    maxYieldInterval = 300,\n    scheduleCallback = null,\n    scheduledCallback = null;\nconst maxSigned31BitInt = 1073741823;\nfunction setupScheduler() {\n  if (window && window.MessageChannel) {\n    const channel = new MessageChannel(),\n          port = channel.port2;\n    scheduleCallback = () => port.postMessage(null);\n    channel.port1.onmessage = () => {\n      if (scheduledCallback !== null) {\n        const currentTime = performance.now();\n        deadline = currentTime + yieldInterval;\n        const hasTimeRemaining = true;\n        try {\n          const hasMoreWork = scheduledCallback(hasTimeRemaining, currentTime);\n          if (!hasMoreWork) {\n            scheduledCallback = null;\n          } else port.postMessage(null);\n        } catch (error) {\n          port.postMessage(null);\n          throw error;\n        }\n      }\n    };\n  } else {\n    let _callback;\n    scheduleCallback = () => {\n      if (!_callback) {\n        _callback = scheduledCallback;\n        setTimeout(() => {\n          const currentTime = performance.now();\n          deadline = currentTime + yieldInterval;\n          const hasMoreWork = _callback(true, currentTime);\n          _callback = null;\n          if (hasMoreWork) scheduleCallback();\n        }, 0);\n      }\n    };\n  }\n  if (navigator && navigator.scheduling && navigator.scheduling.isInputPending) {\n    const scheduling = navigator.scheduling;\n    shouldYieldToHost = () => {\n      const currentTime = performance.now();\n      if (currentTime >= deadline) {\n        if (scheduling.isInputPending()) {\n          return true;\n        }\n        return currentTime >= maxYieldInterval;\n      } else {\n        return false;\n      }\n    };\n  } else {\n    shouldYieldToHost = () => performance.now() >= deadline;\n  }\n}\nfunction enqueue(taskQueue, task) {\n  function findIndex() {\n    let m = 0;\n    let n = taskQueue.length - 1;\n    while (m <= n) {\n      let k = n + m >> 1;\n      let cmp = task.expirationTime - taskQueue[k].expirationTime;\n      if (cmp > 0) m = k + 1;else if (cmp < 0) n = k - 1;else return k;\n    }\n    return m;\n  }\n  taskQueue.splice(findIndex(), 0, task);\n}\nfunction requestCallback(fn, options) {\n  if (!scheduleCallback) setupScheduler();\n  let startTime = performance.now(),\n      timeout = maxSigned31BitInt;\n  if (options && options.timeout) timeout = options.timeout;\n  const newTask = {\n    id: taskIdCounter++,\n    fn,\n    startTime,\n    expirationTime: startTime + timeout\n  };\n  enqueue(taskQueue, newTask);\n  if (!isCallbackScheduled && !isPerformingWork) {\n    isCallbackScheduled = true;\n    scheduledCallback = flushWork;\n    scheduleCallback();\n  }\n  return newTask;\n}\nfunction cancelCallback(task) {\n  task.fn = null;\n}\nfunction flushWork(hasTimeRemaining, initialTime) {\n  isCallbackScheduled = false;\n  isPerformingWork = true;\n  try {\n    return workLoop(hasTimeRemaining, initialTime);\n  } finally {\n    currentTask = null;\n    isPerformingWork = false;\n  }\n}\nfunction workLoop(hasTimeRemaining, initialTime) {\n  let currentTime = initialTime;\n  currentTask = taskQueue[0] || null;\n  while (currentTask !== null) {\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n      break;\n    }\n    const callback = currentTask.fn;\n    if (callback !== null) {\n      currentTask.fn = null;\n      const didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n      callback(didUserCallbackTimeout);\n      currentTime = performance.now();\n      if (currentTask === taskQueue[0]) {\n        taskQueue.shift();\n      }\n    } else taskQueue.shift();\n    currentTask = taskQueue[0] || null;\n  }\n  return currentTask !== null;\n}\n\nconst equalFn = (a, b) => a === b;\nlet ERROR = null;\nlet runEffects = runQueue;\nconst NOTPENDING = {};\nconst STALE = 1;\nconst PENDING = 2;\nconst UNOWNED = {\n  owned: null,\n  cleanups: null,\n  context: null,\n  owner: null\n};\nconst [transPending, setTransPending] = createSignal(false, true);\nvar Owner = null;\nvar Listener = null;\nlet Pending = null;\nlet Updates = null;\nlet Effects = null;\nlet Transition = null;\nlet ExecCount = 0;\nfunction createRoot(fn, detachedOwner) {\n  detachedOwner && (Owner = detachedOwner);\n  const listener = Listener,\n        owner = Owner,\n        root = fn.length === 0 && !false ? UNOWNED : {\n    owned: null,\n    cleanups: null,\n    context: null,\n    owner,\n    attached: !!detachedOwner\n  };\n  Owner = root;\n  Listener = null;\n  let result;\n  try {\n    runUpdates(() => result = fn(() => cleanNode(root)), true);\n  } finally {\n    Listener = listener;\n    Owner = owner;\n  }\n  return result;\n}\nfunction createSignal(value, areEqual, options) {\n  const s = {\n    value,\n    observers: null,\n    observerSlots: null,\n    pending: NOTPENDING,\n    comparator: areEqual ? typeof areEqual === \"function\" ? areEqual : equalFn : undefined\n  };\n  return [readSignal.bind(s), writeSignal.bind(s)];\n}\nfunction createComputed(fn, value) {\n  updateComputation(createComputation(fn, value, true));\n}\nfunction createRenderEffect(fn, value) {\n  updateComputation(createComputation(fn, value, false));\n}\nfunction createEffect(fn, value) {\n  if (globalThis._$HYDRATION && globalThis._$HYDRATION.asyncSSR) return;\n  runEffects = runUserEffects;\n  const c = createComputation(fn, value, false),\n        s = SuspenseContext && lookup(Owner, SuspenseContext.id);\n  if (s) c.suspense = s;\n  c.user = true;\n  Effects && Effects.push(c);\n}\nfunction resumeEffects(e) {\n  Transition && (Transition.running = true);\n  Effects.push.apply(Effects, e);\n  e.length = 0;\n}\nfunction createMemo(fn, value, areEqual) {\n  const c = createComputation(fn, value, true);\n  c.pending = NOTPENDING;\n  c.observers = null;\n  c.observerSlots = null;\n  c.state = 0;\n  c.comparator = areEqual ? typeof areEqual === \"function\" ? areEqual : equalFn : undefined;\n  updateComputation(c);\n  return readSignal.bind(c);\n}\nfunction createDeferred(source, options) {\n  let t,\n      timeout = options ? options.timeoutMs : undefined;\n  const [deferred, setDeferred] = createSignal();\n  const node = createComputation(() => {\n    if (!t || !t.fn) t = requestCallback(() => setDeferred(node.value), timeout !== undefined ? {\n      timeout\n    } : undefined);\n    return source();\n  }, undefined, true);\n  updateComputation(node);\n  setDeferred(node.value);\n  return deferred;\n}\nfunction createSelector(source, fn = equalFn) {\n  let subs = new Map();\n  const node = createComputation(p => {\n    const v = source();\n    for (const key of subs.keys()) if (fn(key, v) || p && fn(key, p)) {\n      const c = subs.get(key);\n      c.state = STALE;\n      if (c.pure) Updates.push(c);else Effects.push(c);\n    }\n    return v;\n  }, undefined, true);\n  updateComputation(node);\n  return key => {\n    if (Listener) {\n      subs.set(key, Listener);\n      onCleanup(() => subs.delete(key));\n    }\n    return fn(key, node.value);\n  };\n}\nfunction batch(fn) {\n  if (Pending) return fn();\n  const q = Pending = [],\n        result = fn();\n  Pending = null;\n  runUpdates(() => {\n    for (let i = 0; i < q.length; i += 1) {\n      const data = q[i];\n      if (data.pending !== NOTPENDING) {\n        const pending = data.pending;\n        data.pending = NOTPENDING;\n        writeSignal.call(data, pending);\n      }\n    }\n  }, false);\n  return result;\n}\nfunction useTransition() {\n  return [transPending, fn => {\n    if (SuspenseContext) {\n      Transition || (Transition = {\n        sources: new Set(),\n        effects: [],\n        promises: new Set(),\n        disposed: new Set(),\n        running: true\n      });\n      Transition.running = true;\n    }\n    batch(fn);\n  }];\n}\nfunction untrack(fn) {\n  let result,\n      listener = Listener;\n  Listener = null;\n  result = fn();\n  Listener = listener;\n  return result;\n}\nfunction on(...args) {\n  const fn = args.pop();\n  let deps;\n  let isArray = true;\n  let prev;\n  if (args.length < 2) {\n    deps = args[0];\n    isArray = false;\n  } else deps = args;\n  return prevResult => {\n    let value;\n    if (isArray) {\n      value = [];\n      if (!prev) prev = [];\n      for (let i = 0; i < deps.length; i++) value.push(deps[i]());\n    } else value = deps();\n    const result = untrack(() => fn(value, prev, prevResult));\n    prev = value;\n    return result;\n  };\n}\nfunction onMount(fn) {\n  createEffect(() => untrack(fn));\n}\nfunction onCleanup(fn) {\n  if (Owner === null) ;else if (Owner.cleanups === null) Owner.cleanups = [fn];else Owner.cleanups.push(fn);\n  return fn;\n}\nfunction onError(fn) {\n  ERROR || (ERROR = Symbol(\"error\"));\n  if (Owner === null) ;else if (Owner.context === null) Owner.context = {\n    [ERROR]: [fn]\n  };else if (!Owner.context[ERROR]) Owner.context[ERROR] = [fn];else Owner.context[ERROR].push(fn);\n}\nfunction getListener() {\n  return Listener;\n}\nfunction getContextOwner() {\n  return Owner;\n}\nfunction serializeGraph(owner) {\n  return {};\n}\nfunction createContext(defaultValue) {\n  const id = Symbol(\"context\");\n  return {\n    id,\n    Provider: createProvider(id),\n    defaultValue\n  };\n}\nfunction useContext(context) {\n  return lookup(Owner, context.id) || context.defaultValue;\n}\nlet SuspenseContext;\nfunction getSuspenseContext() {\n  return SuspenseContext || (SuspenseContext = createContext({}));\n}\nfunction createResource(init, options = {}) {\n  const contexts = new Set(),\n        h = globalThis._$HYDRATION || {},\n        [s, set] = createSignal(init, true),\n        [track, trigger] = createSignal(),\n        [loading, setLoading] = createSignal(false, true);\n  let err = null,\n      pr = null,\n      ctx;\n  function loadEnd(p, v, e) {\n    if (pr === p) {\n      err = e;\n      pr = null;\n      if (Transition && Transition.promises.has(p)) {\n        Transition.promises.delete(p);\n        runUpdates(() => {\n          Transition.running = true;\n          if (!Transition.promises.size) {\n            Effects.push.apply(Effects, Transition.effects);\n            Transition.effects = [];\n          }\n          completeLoad(v);\n        }, false);\n      } else completeLoad(v);\n    }\n    return v;\n  }\n  function completeLoad(v) {\n    batch(() => {\n      if (ctx) h.context = ctx;\n      if (h.asyncSSR && options.name) h.resources[options.name] = v;\n      set(v);\n      setLoading(false);\n      for (let c of contexts.keys()) c.decrement();\n      contexts.clear();\n    });\n    if (ctx) h.context = ctx = undefined;\n  }\n  function read() {\n    const c = SuspenseContext && lookup(Owner, SuspenseContext.id),\n          v = s();\n    if (err) throw err;\n    if (Listener && !Listener.user && c) {\n      createComputed(() => {\n        track();\n        if (pr) {\n          if (c.resolved && Transition) Transition.promises.add(pr);else if (!contexts.has(c)) {\n            c.increment();\n            contexts.add(c);\n          }\n        }\n      });\n    }\n    return v;\n  }\n  function load(fn) {\n    err = null;\n    let p;\n    const hydrating = h.context && !!h.context.registry;\n    if (hydrating) {\n      if (h.loadResource && !options.notStreamed) {\n        fn = h.loadResource;\n      } else if (options.name && h.resources && options.name in h.resources) {\n        fn = () => {\n          const data = h.resources[options.name];\n          delete h.resources[options.name];\n          return data;\n        };\n      }\n    } else if (h.asyncSSR && h.context) ctx = h.context;\n    p = fn();\n    Transition && pr && Transition.promises.delete(pr);\n    if (typeof p !== \"object\" || !(\"then\" in p)) {\n      pr = null;\n      completeLoad(p);\n      return Promise.resolve(p);\n    }\n    pr = p;\n    batch(() => {\n      setLoading(true);\n      trigger();\n    });\n    return p.then(v => loadEnd(p, v), e => loadEnd(p, undefined, e));\n  }\n  Object.defineProperty(read, \"loading\", {\n    get() {\n      return loading();\n    }\n  });\n  return [read, load];\n}\nfunction readSignal() {\n  if (this.state && this.sources) {\n    const updates = Updates;\n    Updates = null;\n    this.state === STALE ? updateComputation(this) : lookDownstream(this);\n    Updates = updates;\n  }\n  if (Listener) {\n    const sSlot = this.observers ? this.observers.length : 0;\n    if (!Listener.sources) {\n      Listener.sources = [this];\n      Listener.sourceSlots = [sSlot];\n    } else {\n      Listener.sources.push(this);\n      Listener.sourceSlots.push(sSlot);\n    }\n    if (!this.observers) {\n      this.observers = [Listener];\n      this.observerSlots = [Listener.sources.length - 1];\n    } else {\n      this.observers.push(Listener);\n      this.observerSlots.push(Listener.sources.length - 1);\n    }\n  }\n  if (Transition && Transition.running && Transition.sources.has(this)) return this.tValue;\n  return this.value;\n}\nfunction writeSignal(value, isComp) {\n  if (this.comparator) {\n    if (Transition && Transition.running && Transition.sources.has(this)) {\n      if (this.comparator(this.tValue, value)) return value;\n    } else if (this.comparator(this.value, value)) return value;\n  }\n  if (Pending) {\n    if (this.pending === NOTPENDING) Pending.push(this);\n    this.pending = value;\n    return value;\n  }\n  if (Transition) {\n    if (Transition.running || !isComp && Transition.sources.has(this)) {\n      Transition.sources.add(this);\n      this.tValue = value;\n    }\n    if (!Transition.running) this.value = value;\n  } else this.value = value;\n  if (this.observers && (!Updates || this.observers.length)) {\n    runUpdates(() => {\n      for (let i = 0; i < this.observers.length; i += 1) {\n        const o = this.observers[i];\n        if (Transition && Transition.running && Transition.disposed.has(o)) continue;\n        if (o.observers && o.state !== PENDING) markUpstream(o);\n        o.state = STALE;\n        if (o.pure) Updates.push(o);else Effects.push(o);\n      }\n      if (Updates.length > 10e5) {\n        Updates = [];\n        throw new Error(\"Potential Infinite Loop Detected.\");\n      }\n    }, false);\n  }\n  return value;\n}\nfunction updateComputation(node) {\n  if (!node.fn) return;\n  cleanNode(node);\n  const owner = Owner,\n        listener = Listener,\n        time = ExecCount;\n  Listener = Owner = node;\n  runComputation(node, node.value, time);\n  if (Transition && !Transition.running && Transition.sources.has(node)) {\n    Transition.running = true;\n    runComputation(node, node.tValue, time);\n    Transition.running = false;\n  }\n  Listener = listener;\n  Owner = owner;\n}\nfunction runComputation(node, value, time) {\n  let nextValue;\n  try {\n    nextValue = node.fn(value);\n  } catch (err) {\n    handleError(err);\n  }\n  if (!node.updatedAt || node.updatedAt <= time) {\n    if (node.observers && node.observers.length) {\n      writeSignal.call(node, nextValue, true);\n    } else if (Transition && Transition.running && node.pure) {\n      Transition.sources.add(node);\n      node.tValue = nextValue;\n    } else node.value = nextValue;\n    node.updatedAt = time;\n  }\n}\nfunction createComputation(fn, init, pure) {\n  const c = {\n    fn,\n    state: STALE,\n    updatedAt: null,\n    owned: null,\n    sources: null,\n    sourceSlots: null,\n    cleanups: null,\n    value: init,\n    owner: Owner,\n    context: null,\n    pure\n  };\n  if (Owner === null) ;else if (Owner !== UNOWNED) {\n    if (Transition && Transition.running && Owner.pure) {\n      if (!Owner.tOwned) Owner.tOwned = [c];else Owner.tOwned.push(c);\n    } else {\n      if (!Owner.owned) Owner.owned = [c];else Owner.owned.push(c);\n    }\n  }\n  return c;\n}\nfunction runTop(node) {\n  let top = node.state === STALE && node,\n      pending;\n  if (node.suspense && untrack(node.suspense.inFallback)) return node.suspense.effects.push(node);\n  const runningTransition = Transition && Transition.running;\n  while ((node.fn || runningTransition && node.attached) && (node = node.owner)) {\n    if (runningTransition && Transition.disposed.has(node)) return;\n    if (node.state === PENDING) pending = node;else if (node.state === STALE) {\n      top = node;\n      pending = undefined;\n    }\n  }\n  if (pending) {\n    const updates = Updates;\n    Updates = null;\n    lookDownstream(pending);\n    Updates = updates;\n    if (!top || top.state !== STALE) return;\n    if (runningTransition) {\n      node = top;\n      while ((node.fn || node.attached) && (node = node.owner)) {\n        if (Transition.disposed.has(node)) return;\n      }\n    }\n  }\n  top && updateComputation(top);\n}\nfunction runUpdates(fn, init) {\n  if (Updates) return fn();\n  let wait = false;\n  if (!init) Updates = [];\n  if (Effects) wait = true;else Effects = [];\n  ExecCount++;\n  try {\n    fn();\n  } catch (err) {\n    handleError(err);\n  } finally {\n    if (Updates) {\n      runQueue(Updates);\n      Updates = null;\n    }\n    if (wait) return;\n    if (Transition && Transition.running) {\n      Transition.running = false;\n      if (Transition.promises.size) {\n        Transition.effects.push.apply(Transition.effects, Effects);\n        Effects = null;\n        setTransPending(true);\n        return;\n      }\n      Transition.sources.forEach(v => {\n        v.value = v.tValue;\n        if (v.owned) {\n          for (let i = 0, len = v.owned.length; i < len; i++) cleanNode(v.owned[i]);\n        }\n        if (v.tOwned) v.owned = v.tOwned;\n        delete v.tValue;\n        delete v.tOwned;\n      });\n      Transition = null;\n      setTransPending(false);\n    }\n    if (Effects.length) batch(() => {\n      runEffects(Effects);\n      Effects = null;\n    });else {\n      Effects = null;\n    }\n  }\n}\nfunction runQueue(queue) {\n  for (let i = 0; i < queue.length; i++) runTop(queue[i]);\n}\nfunction runUserEffects(queue) {\n  let i,\n      userLength = 0;\n  for (i = 0; i < queue.length; i++) {\n    const e = queue[i];\n    if (!e.user) runTop(e);else queue[userLength++] = e;\n  }\n  const resume = queue.length;\n  for (i = 0; i < userLength; i++) runTop(queue[i]);\n  for (i = resume; i < queue.length; i++) runTop(queue[i]);\n}\nfunction lookDownstream(node) {\n  node.state = 0;\n  for (let i = 0; i < node.sources.length; i += 1) {\n    const source = node.sources[i];\n    if (source.sources) {\n      if (source.state === STALE) runTop(source);else if (source.state === PENDING) lookDownstream(source);\n    }\n  }\n}\nfunction markUpstream(node) {\n  for (let i = 0; i < node.observers.length; i += 1) {\n    const o = node.observers[i];\n    if (!o.state) {\n      o.state = PENDING;\n      o.observers && markUpstream(o);\n    }\n  }\n}\nfunction cleanNode(node) {\n  let i;\n  if (node.sources) {\n    while (node.sources.length) {\n      const source = node.sources.pop(),\n            index = node.sourceSlots.pop(),\n            obs = source.observers;\n      if (obs && obs.length) {\n        const n = obs.pop(),\n              s = source.observerSlots.pop();\n        if (index < obs.length) {\n          n.sourceSlots[s] = index;\n          obs[index] = n;\n          source.observerSlots[index] = s;\n        }\n      }\n    }\n  }\n  if (Transition && Transition.running && node.pure) {\n    if (node.tOwned) {\n      for (i = 0; i < node.tOwned.length; i++) cleanNode(node.tOwned[i]);\n      delete node.tOwned;\n    }\n    reset(node, true);\n  } else if (node.owned) {\n    for (i = 0; i < node.owned.length; i++) cleanNode(node.owned[i]);\n    node.owned = null;\n  }\n  if (node.cleanups) {\n    for (i = 0; i < node.cleanups.length; i++) node.cleanups[i]();\n    node.cleanups = null;\n  }\n  node.state = 0;\n  node.context = null;\n}\nfunction reset(node, top) {\n  if (!top) {\n    node.state = 0;\n    Transition.disposed.add(node);\n  }\n  if (node.owned) {\n    for (let i = 0; i < node.owned.length; i++) reset(node.owned[i]);\n  }\n}\nfunction handleError(err) {\n  const fns = ERROR && lookup(Owner, ERROR);\n  if (!fns) throw err;\n  fns.forEach(f => f(err));\n}\nfunction lookup(owner, key) {\n  return owner && (owner.context && owner.context[key] || owner.owner && lookup(owner.owner, key));\n}\nfunction resolveChildren(children) {\n  if (typeof children === \"function\") return resolveChildren(children());\n  if (Array.isArray(children)) {\n    const results = [];\n    for (let i = 0; i < children.length; i++) {\n      let result = resolveChildren(children[i]);\n      Array.isArray(result) ? results.push.apply(results, result) : results.push(result);\n    }\n    return results;\n  }\n  return children;\n}\nfunction createProvider(id) {\n  return function provider(props) {\n    return createMemo(() => {\n      Owner.context = {\n        [id]: props.value\n      };\n      const children = createMemo(() => props.children);\n      return createMemo(() => resolveChildren(children()));\n    });\n  };\n}\n\nconst $RAW = Symbol(\"state-raw\"),\n      $NODE = Symbol(\"state-node\"),\n      $PROXY = Symbol(\"state-proxy\"),\n      $NAME = Symbol(\"state-name\");\nfunction wrap(value, name, processProps, traps) {\n  let p = value[$PROXY];\n  if (!p) {\n    Object.defineProperty(value, $PROXY, {\n      value: p = new Proxy(value, traps || proxyTraps)\n    });\n    if (processProps) {\n      let keys = Object.keys(value),\n          desc = Object.getOwnPropertyDescriptors(value);\n      for (let i = 0, l = keys.length; i < l; i++) {\n        const prop = keys[i];\n        if (desc[prop].get) {\n          const get = createMemo(desc[prop].get.bind(p), undefined, true);\n          Object.defineProperty(value, prop, {\n            get\n          });\n        }\n        if (desc[prop].set) {\n          const og = desc[prop].set,\n                set = v => batch(() => og.call(p, v));\n          Object.defineProperty(value, prop, {\n            set\n          });\n        }\n      }\n    }\n  }\n  return p;\n}\nfunction isWrappable(obj) {\n  return obj != null && typeof obj === \"object\" && (!obj.__proto__ || obj.__proto__ === Object.prototype || Array.isArray(obj));\n}\nfunction unwrap(item, skipGetters) {\n  let result, unwrapped, v, prop;\n  if (result = item != null && item[$RAW]) return result;\n  if (!isWrappable(item)) return item;\n  if (Array.isArray(item)) {\n    if (Object.isFrozen(item)) item = item.slice(0);\n    for (let i = 0, l = item.length; i < l; i++) {\n      v = item[i];\n      if ((unwrapped = unwrap(v, skipGetters)) !== v) item[i] = unwrapped;\n    }\n  } else {\n    if (Object.isFrozen(item)) item = Object.assign({}, item);\n    let keys = Object.keys(item),\n        desc = skipGetters && Object.getOwnPropertyDescriptors(item);\n    for (let i = 0, l = keys.length; i < l; i++) {\n      prop = keys[i];\n      if (skipGetters && desc[prop].get) continue;\n      v = item[prop];\n      if ((unwrapped = unwrap(v, skipGetters)) !== v) item[prop] = unwrapped;\n    }\n  }\n  return item;\n}\nfunction getDataNodes(target) {\n  let nodes = target[$NODE];\n  if (!nodes) Object.defineProperty(target, $NODE, {\n    value: nodes = {}\n  });\n  return nodes;\n}\nfunction proxyDescriptor(target, property) {\n  const desc = Reflect.getOwnPropertyDescriptor(target, property);\n  if (!desc || desc.get || property === $PROXY || property === $NODE || property === $NAME) return desc;\n  delete desc.value;\n  delete desc.writable;\n  desc.get = () => target[property];\n  return desc;\n}\nconst proxyTraps = {\n  get(target, property, receiver) {\n    if (property === $RAW) return target;\n    if (property === $PROXY) return receiver;\n    const value = target[property];\n    if (property === $NODE || property === \"__proto__\") return value;\n    const wrappable = isWrappable(value);\n    if (Listener && (typeof value !== \"function\" || target.hasOwnProperty(property))) {\n      let nodes, node;\n      if (wrappable && (nodes = getDataNodes(value))) {\n        node = nodes._ || (nodes._ =  createSignal());\n        node[0]();\n      }\n      nodes = getDataNodes(target);\n      node = nodes[property] || (nodes[property] =  createSignal());\n      node[0]();\n    }\n    return wrappable ? wrap(value) : value;\n  },\n  set() {\n    return true;\n  },\n  deleteProperty() {\n    return true;\n  },\n  getOwnPropertyDescriptor: proxyDescriptor\n};\nfunction setProperty(state, property, value) {\n  if (state[property] === value) return;\n  const notify = Array.isArray(state) || !(property in state);\n  if (value === undefined) {\n    delete state[property];\n  } else state[property] = value;\n  let nodes = getDataNodes(state),\n      node;\n  (node = nodes[property]) && node[1](value);\n  notify && (node = nodes._) && node[1]();\n}\nfunction mergeState(state, value) {\n  const keys = Object.keys(value);\n  for (let i = 0; i < keys.length; i += 1) {\n    const key = keys[i];\n    setProperty(state, key, value[key]);\n  }\n}\nfunction updatePath(current, path, traversed = []) {\n  let part,\n      prev = current;\n  if (path.length > 1) {\n    part = path.shift();\n    const partType = typeof part,\n          isArray = Array.isArray(current);\n    if (Array.isArray(part)) {\n      for (let i = 0; i < part.length; i++) {\n        updatePath(current, [part[i]].concat(path), [part[i]].concat(traversed));\n      }\n      return;\n    } else if (isArray && partType === \"function\") {\n      for (let i = 0; i < current.length; i++) {\n        if (part(current[i], i)) updatePath(current, [i].concat(path), [i].concat(traversed));\n      }\n      return;\n    } else if (isArray && partType === \"object\") {\n      const {\n        from = 0,\n        to = current.length - 1,\n        by = 1\n      } = part;\n      for (let i = from; i <= to; i += by) {\n        updatePath(current, [i].concat(path), [i].concat(traversed));\n      }\n      return;\n    } else if (path.length > 1) {\n      updatePath(current[part], path, [part].concat(traversed));\n      return;\n    }\n    prev = current[part];\n    traversed = [part].concat(traversed);\n  }\n  let value = path[0];\n  if (typeof value === \"function\") {\n    value = value(prev, traversed);\n    if (value === prev) return;\n  }\n  if (part === undefined && value == undefined) return;\n  value = unwrap(value);\n  if (part === undefined || isWrappable(prev) && isWrappable(value) && !Array.isArray(value)) {\n    mergeState(prev, value);\n  } else setProperty(current, part, value);\n}\nfunction createState(state, options) {\n  const unwrappedState = unwrap(state || {}, true);\n  const wrappedState = wrap(unwrappedState, false , true);\n  function setState(...args) {\n    batch(() => updatePath(unwrappedState, args));\n  }\n  return [wrappedState, setState];\n}\n\nfunction createResourceNode(v, name) {\n  const [r, load] = createResource(v, {\n    name\n  });\n  return [() => r(), v => load(() => v), load, () => r.loading];\n}\nfunction createResourceState(state, options = {}) {\n  const loadingTraps = {\n    get(nodes, property) {\n      const node = nodes[property] || (nodes[property] = createResourceNode(undefined, options.name && `${options.name}:${property}`));\n      return node[3]();\n    },\n    set() {\n      return true;\n    },\n    deleteProperty() {\n      return true;\n    }\n  };\n  const resourceTraps = {\n    get(target, property, receiver) {\n      if (property === $RAW) return target;\n      if (property === $PROXY) return receiver;\n      if (property === \"loading\") return new Proxy(getDataNodes(target), loadingTraps);\n      const value = target[property];\n      if (property === $NODE || property === \"__proto__\") return value;\n      const wrappable = isWrappable(value);\n      if (Listener && (typeof value !== \"function\" || target.hasOwnProperty(property))) {\n        let nodes, node;\n        if (wrappable && (nodes = getDataNodes(value))) {\n          node = nodes._ || (nodes._ =  createSignal());\n          node[0]();\n        }\n        nodes = getDataNodes(target);\n        node = nodes[property] || (nodes[property] = createResourceNode(value, `${options.name}:${property}`));\n        node[0]();\n      }\n      return wrappable ? wrap(value) : value;\n    },\n    set() {\n      return true;\n    },\n    deleteProperty() {\n      return true;\n    },\n    getOwnPropertyDescriptor: proxyDescriptor\n  };\n  const unwrappedState = unwrap(state || {}, true),\n        wrappedState = wrap(unwrappedState, false , true, resourceTraps);\n  function setState(...args) {\n    batch(() => updatePath(unwrappedState, args));\n  }\n  function loadState(v, r) {\n    const nodes = getDataNodes(unwrappedState),\n          keys = Object.keys(v);\n    for (let i = 0; i < keys.length; i++) {\n      const k = keys[i],\n            node = nodes[k] || (nodes[k] = createResourceNode(unwrappedState[k], `${options.name}:${k}`)),\n            resolver = v => (r ? setState(k, r(v)) : setProperty(unwrappedState, k, v), unwrappedState[k]);\n      node[2](() => {\n        const p = v[k]();\n        return typeof p === \"object\" && \"then\" in p ? p.then(resolver) : resolver(p);\n      });\n    }\n  }\n  return [wrappedState, loadState, setState];\n}\n\nconst proxyTraps$1 = {\n  get(target, property, receiver) {\n    if (property === $RAW) return target;\n    if (property === $PROXY) return receiver;\n    const value = target[property];\n    if (property === $NODE || property === \"__proto__\") return value;\n    const wrappable = isWrappable(value);\n    if (Listener && (typeof value !== \"function\" || target.hasOwnProperty(property))) {\n      let nodes, node;\n      if (wrappable && (nodes = getDataNodes(value))) {\n        node = nodes._ || (nodes._ =  createSignal());\n        node[0]();\n      }\n      nodes = getDataNodes(target);\n      node = nodes[property] || (nodes[property] =  createSignal());\n      node[0]();\n    }\n    return wrappable ? wrap(value, false  , false, proxyTraps$1) : value;\n  },\n  set(target, property, value) {\n    setProperty(target, property, unwrap(value));\n    return true;\n  },\n  deleteProperty(target, property) {\n    setProperty(target, property, undefined);\n    return true;\n  },\n  getOwnPropertyDescriptor: proxyDescriptor\n};\nfunction createMutable(state, options) {\n  const unwrappedState = unwrap(state || {}, true);\n  const wrappedState = wrap(unwrappedState, false , true, proxyTraps$1);\n  return wrappedState;\n}\n\nfunction applyState(target, parent, property, merge, key) {\n  let previous = parent[property];\n  if (target === previous) return;\n  if (!isWrappable(target) || !isWrappable(previous) || key && target[key] !== previous[key]) {\n    target !== previous && setProperty(parent, property, target);\n    return;\n  }\n  if (Array.isArray(target)) {\n    if (target.length && previous.length && (!merge || key && target[0][key] != null)) {\n      let i, j, start, end, newEnd, item, newIndicesNext, keyVal;\n      for (start = 0, end = Math.min(previous.length, target.length); start < end && (previous[start] === target[start] || key && previous[start][key] === target[start][key]); start++) {\n        applyState(target[start], previous, start, merge, key);\n      }\n      const temp = new Array(target.length),\n            newIndices = new Map();\n      for (end = previous.length - 1, newEnd = target.length - 1; end >= start && newEnd >= start && (previous[end] === target[newEnd] || key && previous[end][key] === target[newEnd][key]); end--, newEnd--) {\n        temp[newEnd] = previous[end];\n      }\n      if (start > newEnd || start > end) {\n        for (j = start; j <= newEnd; j++) setProperty(previous, j, target[j]);\n        for (; j < target.length; j++) {\n          setProperty(previous, j, temp[j]);\n          applyState(target[j], previous, j, merge, key);\n        }\n        if (previous.length > target.length) setProperty(previous, \"length\", target.length);\n        return;\n      }\n      newIndicesNext = new Array(newEnd + 1);\n      for (j = newEnd; j >= start; j--) {\n        item = target[j];\n        keyVal = key ? item[key] : item;\n        i = newIndices.get(keyVal);\n        newIndicesNext[j] = i === undefined ? -1 : i;\n        newIndices.set(keyVal, j);\n      }\n      for (i = start; i <= end; i++) {\n        item = previous[i];\n        keyVal = key ? item[key] : item;\n        j = newIndices.get(keyVal);\n        if (j !== undefined && j !== -1) {\n          temp[j] = previous[i];\n          j = newIndicesNext[j];\n          newIndices.set(keyVal, j);\n        }\n      }\n      for (j = start; j < target.length; j++) {\n        if (j in temp) {\n          setProperty(previous, j, temp[j]);\n          applyState(target[j], previous, j, merge, key);\n        } else setProperty(previous, j, target[j]);\n      }\n    } else {\n      for (let i = 0, len = target.length; i < len; i++) {\n        applyState(target[i], previous, i, merge, key);\n      }\n    }\n    if (previous.length > target.length) setProperty(previous, \"length\", target.length);\n    return;\n  }\n  const targetKeys = Object.keys(target);\n  for (let i = 0, len = targetKeys.length; i < len; i++) {\n    applyState(target[targetKeys[i]], previous, targetKeys[i], merge, key);\n  }\n  const previousKeys = Object.keys(previous);\n  for (let i = 0, len = previousKeys.length; i < len; i++) {\n    if (target[previousKeys[i]] === undefined) setProperty(previous, previousKeys[i], undefined);\n  }\n}\nfunction reconcile(value, options = {}) {\n  const {\n    merge,\n    key = \"id\"\n  } = options,\n        v = unwrap(value);\n  return state => {\n    if (!isWrappable(state)) return v;\n    applyState(v, {\n      state\n    }, \"state\", merge, key);\n    return state;\n  };\n}\nconst setterTraps = {\n  get(target, property) {\n    if (property === $RAW) return target;\n    const value = target[property];\n    return isWrappable(value) ? new Proxy(value, setterTraps) : value;\n  },\n  set(target, property, value) {\n    setProperty(target, property, unwrap(value));\n    return true;\n  },\n  deleteProperty(target, property) {\n    setProperty(target, property, undefined);\n    return true;\n  }\n};\nfunction produce(fn) {\n  return state => {\n    if (isWrappable(state)) fn(new Proxy(state, setterTraps));\n    return state;\n  };\n}\n\nconst FALLBACK = Symbol(\"fallback\");\nfunction mapArray(list, mapFn, options = {}) {\n  let items = [],\n      mapped = [],\n      disposers = [],\n      len = 0,\n      indexes = mapFn.length > 1 ? [] : null,\n      ctx = Owner;\n  onCleanup(() => {\n    for (let i = 0, length = disposers.length; i < length; i++) disposers[i]();\n  });\n  return () => {\n    let newItems = list() || [],\n        i,\n        j;\n    return untrack(() => {\n      let newLen = newItems.length,\n          newIndices,\n          newIndicesNext,\n          temp,\n          tempdisposers,\n          tempIndexes,\n          start,\n          end,\n          newEnd,\n          item;\n      if (newLen === 0) {\n        if (len !== 0) {\n          for (i = 0; i < len; i++) disposers[i]();\n          disposers = [];\n          items = [];\n          mapped = [];\n          len = 0;\n          indexes && (indexes = []);\n        }\n        if (options.fallback) {\n          items = [FALLBACK];\n          mapped[0] = createRoot(disposer => {\n            disposers[0] = disposer;\n            return options.fallback();\n          }, ctx);\n          len = 1;\n        }\n      }\n      else if (len === 0) {\n          for (j = 0; j < newLen; j++) {\n            items[j] = newItems[j];\n            mapped[j] = createRoot(mapper, ctx);\n          }\n          len = newLen;\n        } else {\n          temp = new Array(newLen);\n          tempdisposers = new Array(newLen);\n          indexes && (tempIndexes = new Array(newLen));\n          for (start = 0, end = Math.min(len, newLen); start < end && items[start] === newItems[start]; start++);\n          for (end = len - 1, newEnd = newLen - 1; end >= start && newEnd >= start && items[end] === newItems[newEnd]; end--, newEnd--) {\n            temp[newEnd] = mapped[end];\n            tempdisposers[newEnd] = disposers[end];\n            indexes && (tempIndexes[newEnd] = indexes[end]);\n          }\n          newIndices = new Map();\n          newIndicesNext = new Array(newEnd + 1);\n          for (j = newEnd; j >= start; j--) {\n            item = newItems[j];\n            i = newIndices.get(item);\n            newIndicesNext[j] = i === undefined ? -1 : i;\n            newIndices.set(item, j);\n          }\n          for (i = start; i <= end; i++) {\n            item = items[i];\n            j = newIndices.get(item);\n            if (j !== undefined && j !== -1) {\n              temp[j] = mapped[i];\n              tempdisposers[j] = disposers[i];\n              indexes && (tempIndexes[j] = indexes[i]);\n              j = newIndicesNext[j];\n              newIndices.set(item, j);\n            } else disposers[i]();\n          }\n          for (j = start; j < newLen; j++) {\n            if (j in temp) {\n              mapped[j] = temp[j];\n              disposers[j] = tempdisposers[j];\n              if (indexes) {\n                indexes[j] = tempIndexes[j];\n                indexes[j](j);\n              }\n            } else mapped[j] = createRoot(mapper, ctx);\n          }\n          len = mapped.length = newLen;\n          items = newItems.slice(0);\n        }\n      return mapped;\n    });\n    function mapper(disposer) {\n      disposers[j] = disposer;\n      if (indexes) {\n        const [s, set] = createSignal(j, true);\n        indexes[j] = set;\n        return mapFn(newItems[j], s);\n      }\n      return mapFn(newItems[j]);\n    }\n  };\n}\nfunction indexArray(list, mapFn, options = {}) {\n  let items = [],\n      mapped = [],\n      disposers = [],\n      signals = [],\n      len = 0,\n      i,\n      ctx = Owner;\n  onCleanup(() => {\n    for (let i = 0, length = disposers.length; i < length; i++) disposers[i]();\n  });\n  return () => {\n    const newItems = list() || [];\n    return untrack(() => {\n      if (newItems.length === 0) {\n        if (len !== 0) {\n          for (i = 0; i < len; i++) disposers[i]();\n          disposers = [];\n          items = [];\n          mapped = [];\n          len = 0;\n          signals = [];\n        }\n        if (options.fallback) {\n          items = [FALLBACK];\n          mapped[0] = createRoot(disposer => {\n            disposers[0] = disposer;\n            return options.fallback();\n          }, ctx);\n          len = 1;\n        }\n        return mapped;\n      }\n      if (items[0] === FALLBACK) {\n        disposers[0]();\n        disposers = [];\n        items = [];\n        mapped = [];\n        len = 0;\n      }\n      for (i = 0; i < newItems.length; i++) {\n        if (i < items.length && items[i] !== newItems[i]) {\n          signals[i](newItems[i]);\n        } else if (i >= items.length) {\n          mapped[i] = createRoot(mapper, ctx);\n        }\n      }\n      for (; i < items.length; i++) {\n        disposers[i]();\n      }\n      len = mapped.length = signals.length = disposers.length = newItems.length;\n      items = newItems.slice(0);\n      return mapped;\n    });\n    function mapper(disposer) {\n      disposers[i] = disposer;\n      const [s, set] = createSignal(newItems[i]);\n      signals[i] = set;\n      return mapFn(s, i);\n    }\n  };\n}\n\nfunction createComponent(Comp, props) {\n  return untrack(() => Comp(props));\n}\nfunction assignProps(target, ...sources) {\n  for (let i = 0; i < sources.length; i++) {\n    const descriptors = Object.getOwnPropertyDescriptors(sources[i]);\n    Object.defineProperties(target, descriptors);\n  }\n  return target;\n}\nfunction splitProps(props, ...keys) {\n  const descriptors = Object.getOwnPropertyDescriptors(props),\n        split = k => {\n    const clone = {};\n    for (let i = 0; i < k.length; i++) {\n      const key = k[i];\n      if (descriptors[key]) {\n        Object.defineProperty(clone, key, descriptors[key]);\n        delete descriptors[key];\n      }\n    }\n    return clone;\n  };\n  return keys.map(split).concat(split(Object.keys(descriptors)));\n}\nfunction lazy(fn) {\n  let p;\n  return props => {\n    const h = globalThis._$HYDRATION || {},\n          hydrating = h.context && h.context.registry,\n          ctx = nextHydrateContext(),\n          [s, l] = createResource(undefined, {\n      notStreamed: true\n    });\n    if (hydrating && h.resources) {\n      (p || (p = fn())).then(mod => {\n        setHydrateContext(ctx);\n        l(() => mod.default);\n        setHydrateContext(undefined);\n      });\n    } else l(() => (p || (p = fn())).then(mod => mod.default));\n    let Comp;\n    return createMemo(() => (Comp = s()) && untrack(() => {\n      if (!ctx) return Comp(props);\n      const c = h.context;\n      setHydrateContext(ctx);\n      const r = Comp(props);\n      setHydrateContext(c);\n      return r;\n    }));\n  };\n}\nfunction setHydrateContext(context) {\n  globalThis._$HYDRATION.context = context;\n}\nfunction nextHydrateContext() {\n  const hydration = globalThis._$HYDRATION;\n  return hydration && hydration.context ? {\n    id: `${hydration.context.id}.${hydration.context.count++}`,\n    count: 0,\n    registry: hydration.context.registry\n  } : undefined;\n}\n\nfunction For(props) {\n  const fallback = \"fallback\" in props && {\n    fallback: () => props.fallback\n  };\n  return createMemo(mapArray(() => props.each, props.children, fallback ? fallback : undefined));\n}\nfunction Index(props) {\n  const fallback = \"fallback\" in props && {\n    fallback: () => props.fallback\n  };\n  return createMemo(indexArray(() => props.each, props.children, fallback ? fallback : undefined));\n}\nfunction Show(props) {\n  const childDesc = Object.getOwnPropertyDescriptor(props, \"children\").value,\n        callFn = typeof childDesc === \"function\" && childDesc.length,\n        condition = createMemo(callFn ? () => props.when : () => !!props.when, undefined, true);\n  return createMemo(() => {\n    const c = condition();\n    return c ? callFn ? untrack(() => props.children(c)) : props.children : props.fallback;\n  });\n}\nfunction Switch(props) {\n  let conditions = props.children;\n  Array.isArray(conditions) || (conditions = [conditions]);\n  const evalConditions = createMemo(() => {\n    for (let i = 0; i < conditions.length; i++) {\n      const c = conditions[i].when;\n      if (c) return [i, conditions[i].keyed ? c : !!c];\n    }\n    return [-1];\n  }, undefined, (a, b) => a && a[0] === b[0] && a[1] === b[1]);\n  return createMemo(() => {\n    const [index, when] = evalConditions();\n    if (index < 0) return props.fallback;\n    const c = conditions[index].children;\n    return typeof c === \"function\" && c.length ? untrack(() => c(when)) : c;\n  });\n}\nfunction Match(props) {\n  const childDesc = Object.getOwnPropertyDescriptor(props, \"children\").value;\n  props.keyed = typeof childDesc === \"function\" && !!childDesc.length;\n  return props;\n}\nfunction ErrorBoundary(props) {\n  const [errored, setErrored] = createSignal(),\n        fallbackDesc = Object.getOwnPropertyDescriptor(props, \"fallback\").value,\n        callFn = typeof fallbackDesc === \"function\" && !!fallbackDesc.length;\n  onError(setErrored);\n  let e;\n  return createMemo(() => (e = errored()) != null ? callFn ? untrack(() => props.fallback(e)) : props.fallback : props.children);\n}\n\nconst SuspenseListContext = createContext();\nlet trackSuspense = false;\nfunction awaitSuspense(fn) {\n  const SuspenseContext = getSuspenseContext();\n  if (!trackSuspense) {\n    let count = 0;\n    const [active, trigger] = createSignal(false);\n    SuspenseContext.active = active;\n    SuspenseContext.increment = () => count++ === 0 && trigger(true);\n    SuspenseContext.decrement = () => --count <= 0 && trigger(false);\n    trackSuspense = true;\n  }\n  return () => new Promise(resolve => {\n    const res = fn();\n    createRenderEffect(() => !SuspenseContext.active() && resolve(res));\n  });\n}\nfunction SuspenseList(props) {\n  let index = 0,\n      suspenseSetter,\n      showContent,\n      showFallback;\n  const listContext = useContext(SuspenseListContext);\n  if (listContext) {\n    const [inFallback, setFallback] = createSignal(false, true);\n    suspenseSetter = setFallback;\n    [showContent, showFallback] = listContext.register(inFallback);\n  }\n  const registry = [],\n        comp = createComponent(SuspenseListContext.Provider, {\n    value: {\n      register: inFallback => {\n        const [showingContent, showContent] = createSignal(false, true),\n              [showingFallback, showFallback] = createSignal(false, true);\n        registry[index++] = {\n          inFallback,\n          showContent,\n          showFallback\n        };\n        return [showingContent, showingFallback];\n      }\n    },\n    get children() {\n      return props.children;\n    }\n  });\n  createComputed(() => {\n    const reveal = props.revealOrder,\n          tail = props.tail,\n          visibleContent = showContent ? showContent() : true,\n          visibleFallback = showFallback ? showFallback() : true,\n          reverse = reveal === \"backwards\";\n    if (reveal === \"together\") {\n      const all = registry.every(i => !i.inFallback());\n      suspenseSetter && suspenseSetter(!all);\n      registry.forEach(i => {\n        i.showContent(all && visibleContent);\n        i.showFallback(visibleFallback);\n      });\n      return;\n    }\n    let stop = false;\n    for (let i = 0, len = registry.length; i < len; i++) {\n      const n = reverse ? len - i - 1 : i,\n            s = registry[n].inFallback();\n      if (!stop && !s) {\n        registry[n].showContent(visibleContent);\n        registry[n].showFallback(visibleFallback);\n      } else {\n        const next = !stop;\n        if (next && suspenseSetter) suspenseSetter(true);\n        if (!tail || next && tail === \"collapsed\") {\n          registry[n].showFallback(visibleFallback);\n        } else registry[n].showFallback(false);\n        stop = true;\n        registry[n].showContent(next);\n      }\n    }\n    if (!stop && suspenseSetter) suspenseSetter(false);\n  });\n  return comp;\n}\nfunction Suspense(props) {\n  let counter = 0,\n      showContent,\n      showFallback;\n  const [inFallback, setFallback] = createSignal(false),\n        SuspenseContext = getSuspenseContext(),\n        store = {\n    increment: () => {\n      if (++counter === 1) {\n        setFallback(true);\n        trackSuspense && SuspenseContext.increment();\n      }\n    },\n    decrement: () => {\n      if (--counter === 0) {\n        setFallback(false);\n        trackSuspense && setTimeout(SuspenseContext.decrement);\n      }\n    },\n    inFallback,\n    effects: [],\n    resolved: false\n  };\n  const listContext = useContext(SuspenseListContext);\n  if (listContext) [showContent, showFallback] = listContext.register(store.inFallback);\n  return createComponent(SuspenseContext.Provider, {\n    value: store,\n    get children() {\n      const rendered = untrack(() => props.children);\n      return createMemo(() => {\n        const inFallback = store.inFallback(),\n              visibleContent = showContent ? showContent() : true,\n              visibleFallback = showFallback ? showFallback() : true;\n        if (!inFallback && visibleContent) {\n          store.resolved = true;\n          resumeEffects(store.effects);\n          return rendered;\n        }\n        if (!visibleFallback) return;\n        return props.fallback;\n      });\n    }\n  });\n}\n\n\n\n\n//# sourceURL=webpack://hello-express/./node_modules/solid-js/dist/solid.js?");

/***/ }),

/***/ "./node_modules/solid-js/web/dist/web.js":
/*!***********************************************!*\
  !*** ./node_modules/solid-js/web/dist/web.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ErrorBoundary\": () => /* reexport safe */ solid_js__WEBPACK_IMPORTED_MODULE_0__.ErrorBoundary,\n/* harmony export */   \"For\": () => /* reexport safe */ solid_js__WEBPACK_IMPORTED_MODULE_0__.For,\n/* harmony export */   \"Index\": () => /* reexport safe */ solid_js__WEBPACK_IMPORTED_MODULE_0__.Index,\n/* harmony export */   \"Match\": () => /* reexport safe */ solid_js__WEBPACK_IMPORTED_MODULE_0__.Match,\n/* harmony export */   \"Show\": () => /* reexport safe */ solid_js__WEBPACK_IMPORTED_MODULE_0__.Show,\n/* harmony export */   \"Suspense\": () => /* reexport safe */ solid_js__WEBPACK_IMPORTED_MODULE_0__.Suspense,\n/* harmony export */   \"SuspenseList\": () => /* reexport safe */ solid_js__WEBPACK_IMPORTED_MODULE_0__.SuspenseList,\n/* harmony export */   \"Switch\": () => /* reexport safe */ solid_js__WEBPACK_IMPORTED_MODULE_0__.Switch,\n/* harmony export */   \"assignProps\": () => /* reexport safe */ solid_js__WEBPACK_IMPORTED_MODULE_0__.assignProps,\n/* harmony export */   \"createComponent\": () => /* reexport safe */ solid_js__WEBPACK_IMPORTED_MODULE_0__.createComponent,\n/* harmony export */   \"currentContext\": () => /* reexport safe */ solid_js__WEBPACK_IMPORTED_MODULE_0__.getContextOwner,\n/* harmony export */   \"effect\": () => /* reexport safe */ solid_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect,\n/* harmony export */   \"Aliases\": () => /* binding */ Aliases,\n/* harmony export */   \"ChildProperties\": () => /* binding */ ChildProperties,\n/* harmony export */   \"Dynamic\": () => /* binding */ Dynamic,\n/* harmony export */   \"NonComposedEvents\": () => /* binding */ NonComposedEvents,\n/* harmony export */   \"Portal\": () => /* binding */ Portal,\n/* harmony export */   \"Properties\": () => /* binding */ Properties,\n/* harmony export */   \"SVGElements\": () => /* binding */ SVGElements,\n/* harmony export */   \"SVGNamespace\": () => /* binding */ SVGNamespace,\n/* harmony export */   \"assign\": () => /* binding */ assign,\n/* harmony export */   \"classList\": () => /* binding */ classList,\n/* harmony export */   \"clearDelegatedEvents\": () => /* binding */ clearDelegatedEvents,\n/* harmony export */   \"delegateEvents\": () => /* binding */ delegateEvents,\n/* harmony export */   \"dynamicProperty\": () => /* binding */ dynamicProperty,\n/* harmony export */   \"escape\": () => /* binding */ escape,\n/* harmony export */   \"generateHydrationScript\": () => /* binding */ generateHydrationScript,\n/* harmony export */   \"getNextElement\": () => /* binding */ getNextElement,\n/* harmony export */   \"getNextMarker\": () => /* binding */ getNextMarker,\n/* harmony export */   \"hydrate\": () => /* binding */ hydrate,\n/* harmony export */   \"insert\": () => /* binding */ insert,\n/* harmony export */   \"isServer\": () => /* binding */ isServer,\n/* harmony export */   \"memo\": () => /* binding */ memo,\n/* harmony export */   \"render\": () => /* binding */ render,\n/* harmony export */   \"renderToNodeStream\": () => /* binding */ renderToNodeStream,\n/* harmony export */   \"renderToString\": () => /* binding */ renderToString,\n/* harmony export */   \"renderToWebStream\": () => /* binding */ renderToWebStream,\n/* harmony export */   \"resolveSSRNode\": () => /* binding */ resolveSSRNode,\n/* harmony export */   \"runHydrationEvents\": () => /* binding */ runHydrationEvents,\n/* harmony export */   \"setAttribute\": () => /* binding */ setAttribute,\n/* harmony export */   \"setAttributeNS\": () => /* binding */ setAttributeNS,\n/* harmony export */   \"spread\": () => /* binding */ spread,\n/* harmony export */   \"ssr\": () => /* binding */ ssr,\n/* harmony export */   \"ssrBoolean\": () => /* binding */ ssrBoolean,\n/* harmony export */   \"ssrClassList\": () => /* binding */ ssrClassList,\n/* harmony export */   \"ssrSpread\": () => /* binding */ ssrSpread,\n/* harmony export */   \"ssrStyle\": () => /* binding */ ssrStyle,\n/* harmony export */   \"style\": () => /* binding */ style,\n/* harmony export */   \"template\": () => /* binding */ template\n/* harmony export */ });\n/* harmony import */ var solid_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! solid-js */ \"./node_modules/solid-js/dist/solid.js\");\n\n\n\nconst booleans = [\"allowfullscreen\", \"allowpaymentrequest\", \"async\", \"autofocus\", \"autoplay\", \"checked\", \"controls\", \"default\", \"disabled\", \"formnovalidate\", \"hidden\", \"ismap\", \"itemscope\", \"loop\", \"multiple\", \"muted\", \"nomodule\", \"novalidate\", \"open\", \"playsinline\", \"readonly\", \"required\", \"reversed\", \"seamless\", \"selected\", \"truespeed\"];\nconst Properties = new Set([\"className\", \"indeterminate\", \"value\", ...booleans]);\nconst ChildProperties = new Set([\"innerHTML\", \"textContent\", \"innerText\", \"children\"]);\nconst Aliases = {\n  className: \"class\",\n  htmlFor: \"for\"\n};\nconst NonComposedEvents = new Set([\"abort\", \"animationstart\", \"animationend\", \"animationiteration\", \"blur\", \"change\", \"copy\", \"cut\", \"error\", \"focus\", \"gotpointercapture\", \"load\", \"loadend\", \"loadstart\", \"lostpointercapture\", \"mouseenter\", \"mouseleave\", \"paste\", \"pointerenter\", \"pointerleave\", \"progress\", \"reset\", \"scroll\", \"select\", \"submit\", \"toggle\", \"transitionstart\", \"transitioncancel\", \"transitionend\", \"transitionrun\"]);\nconst SVGElements = new Set([\n\"altGlyph\", \"altGlyphDef\", \"altGlyphItem\", \"animate\", \"animateColor\", \"animateMotion\", \"animateTransform\", \"circle\", \"clipPath\", \"color-profile\", \"cursor\", \"defs\", \"desc\", \"ellipse\", \"feBlend\", \"feColorMatrix\", \"feComponentTransfer\", \"feComposite\", \"feConvolveMatrix\", \"feDiffuseLighting\", \"feDisplacementMap\", \"feDistantLight\", \"feFlood\", \"feFuncA\", \"feFuncB\", \"feFuncG\", \"feFuncR\", \"feGaussianBlur\", \"feImage\", \"feMerge\", \"feMergeNode\", \"feMorphology\", \"feOffset\", \"fePointLight\", \"feSpecularLighting\", \"feSpotLight\", \"feTile\", \"feTurbulence\", \"filter\", \"font\", \"font-face\", \"font-face-format\", \"font-face-name\", \"font-face-src\", \"font-face-uri\", \"foreignObject\", \"g\", \"glyph\", \"glyphRef\", \"hkern\", \"image\", \"line\", \"linearGradient\", \"marker\", \"mask\", \"metadata\", \"missing-glyph\", \"mpath\", \"path\", \"pattern\", \"polygon\", \"polyline\", \"radialGradient\", \"rect\",\n\"set\", \"stop\",\n\"svg\", \"switch\", \"symbol\", \"text\", \"textPath\",\n\"tref\", \"tspan\", \"use\", \"view\", \"vkern\"]);\nconst SVGNamespace = {\n  xlink: \"http://www.w3.org/1999/xlink\",\n  xml: \"http://www.w3.org/XML/1998/namespace\"\n};\n\nfunction memo(fn, equal) {\n  return (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(fn, undefined, equal);\n}\n\nfunction dynamicProperty(props, key) {\n  const src = props[key];\n  Object.defineProperty(props, key, {\n    get() {\n      return src();\n    },\n    enumerable: true\n  });\n  return props;\n}\nfunction getHydrationKey() {\n  return globalThis._$HYDRATION.context.id;\n}\n\nfunction reconcileArrays(parentNode, a, b) {\n  let bLength = b.length,\n      aEnd = a.length,\n      bEnd = bLength,\n      aStart = 0,\n      bStart = 0,\n      after = a[aEnd - 1].nextSibling,\n      map = null;\n  while (aStart < aEnd || bStart < bEnd) {\n    if (aEnd === aStart) {\n      const node = bEnd < bLength ? bStart ? b[bStart - 1].nextSibling : b[bEnd - bStart] : after;\n      while (bStart < bEnd) parentNode.insertBefore(b[bStart++], node);\n    } else if (bEnd === bStart) {\n      while (aStart < aEnd) {\n        if (!map || !map.has(a[aStart])) parentNode.removeChild(a[aStart]);\n        aStart++;\n      }\n    } else if (a[aStart] === b[bStart]) {\n      aStart++;\n      bStart++;\n    } else if (a[aEnd - 1] === b[bEnd - 1]) {\n      aEnd--;\n      bEnd--;\n    } else if (a[aStart] === b[bEnd - 1] && b[bStart] === a[aEnd - 1]) {\n      const node = a[--aEnd].nextSibling;\n      parentNode.insertBefore(b[bStart++], a[aStart++].nextSibling);\n      parentNode.insertBefore(b[--bEnd], node);\n      a[aEnd] = b[bEnd];\n    } else {\n      if (!map) {\n        map = new Map();\n        let i = bStart;\n        while (i < bEnd) map.set(b[i], i++);\n      }\n      const index = map.get(a[aStart]);\n      if (index != null) {\n        if (bStart < index && index < bEnd) {\n          let i = aStart,\n              sequence = 1,\n              t;\n          while (++i < aEnd && i < bEnd) {\n            if ((t = map.get(a[i])) == null || t !== index + sequence) break;\n            sequence++;\n          }\n          if (sequence > index - bStart) {\n            const node = a[aStart];\n            while (bStart < index) parentNode.insertBefore(b[bStart++], node);\n          } else parentNode.replaceChild(b[bStart++], a[aStart++]);\n        } else aStart++;\n      } else parentNode.removeChild(a[aStart++]);\n    }\n  }\n}\n\nconst eventRegistry = new Set();\nlet hydration = null;\nfunction render(code, element, init) {\n  let disposer;\n  (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.createRoot)(dispose => {\n    disposer = dispose;\n    insert(element, code(), element.firstChild ? null : undefined, init);\n  });\n  return () => {\n    disposer();\n    element.textContent = \"\";\n  };\n}\nfunction template(html, check, isSVG) {\n  const t = document.createElement(\"template\");\n  t.innerHTML = html;\n  if (check && t.innerHTML.split(\"<\").length - 1 !== check) throw `Template html does not match input:\\n${t.innerHTML}\\n\\n${html}`;\n  let node = t.content.firstChild;\n  if (isSVG) node = node.firstChild;\n  return node;\n}\nfunction delegateEvents(eventNames) {\n  for (let i = 0, l = eventNames.length; i < l; i++) {\n    const name = eventNames[i];\n    if (!eventRegistry.has(name)) {\n      eventRegistry.add(name);\n      document.addEventListener(name, eventHandler);\n    }\n  }\n}\nfunction clearDelegatedEvents() {\n  for (let name of eventRegistry.keys()) document.removeEventListener(name, eventHandler);\n  eventRegistry.clear();\n}\nfunction setAttribute(node, name, value) {\n  if (value === false || value == null) node.removeAttribute(name);else node.setAttribute(name, value);\n}\nfunction setAttributeNS(node, namespace, name, value) {\n  if (value === false || value == null) node.removeAttributeNS(namespace, name);else node.setAttributeNS(namespace, name, value);\n}\nfunction classList(node, value, prev) {\n  const classKeys = Object.keys(value);\n  for (let i = 0, len = classKeys.length; i < len; i++) {\n    const key = classKeys[i],\n          classValue = !!value[key],\n          classNames = key.split(/\\s+/);\n    if (!key || prev && prev[key] === classValue) continue;\n    for (let j = 0, nameLen = classNames.length; j < nameLen; j++) node.classList.toggle(classNames[j], classValue);\n  }\n  return value;\n}\nfunction style(node, value, prev) {\n  const nodeStyle = node.style;\n  if (typeof value === \"string\") return nodeStyle.cssText = value;\n  let v, s;\n  if (prev != null && typeof prev !== \"string\") {\n    for (s in value) {\n      v = value[s];\n      v !== prev[s] && nodeStyle.setProperty(s, v);\n    }\n    for (s in prev) {\n      value[s] == null && nodeStyle.removeProperty(s);\n    }\n  } else {\n    for (s in value) nodeStyle.setProperty(s, value[s]);\n  }\n  return value;\n}\nfunction spread(node, accessor, isSVG, skipChildren) {\n  if (typeof accessor === \"function\") {\n    (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(current => spreadExpression(node, accessor(), current, isSVG, skipChildren));\n  } else spreadExpression(node, accessor, undefined, isSVG, skipChildren);\n}\nfunction insert(parent, accessor, marker, initial) {\n  if (marker !== undefined && !initial) initial = [];\n  if (typeof accessor !== \"function\") return insertExpression(parent, accessor, initial, marker);\n  (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(current => insertExpression(parent, accessor(), current, marker), initial);\n}\nfunction assign(node, props, isSVG, skipChildren, prevProps = {}) {\n  let isCE, isProp, isChildProp;\n  for (const prop in props) {\n    if (prop === \"children\") {\n      if (!skipChildren) insertExpression(node, props.children);\n      continue;\n    }\n    const value = props[prop];\n    if (value === prevProps[prop]) continue;\n    if (prop === \"style\") {\n      style(node, value, prevProps[prop]);\n    } else if (prop === \"class\" && !isSVG) {\n      node.className = value;\n    } else if (prop === \"classList\") {\n      classList(node, value, prevProps[prop]);\n    } else if (prop === \"ref\") {\n      value(node);\n    } else if (prop === \"on\") {\n      for (const eventName in value) node.addEventListener(eventName, value[eventName]);\n    } else if (prop === \"onCapture\") {\n      for (const eventName in value) node.addEventListener(eventName, value[eventName], true);\n    } else if (prop.slice(0, 2) === \"on\") {\n      const lc = prop.toLowerCase();\n      if (!NonComposedEvents.has(lc.slice(2))) {\n        const name = lc.slice(2);\n        if (Array.isArray(value)) {\n          node[`__${name}`] = value[0];\n          node[`__${name}Data`] = value[1];\n        } else node[`__${name}`] = value;\n        delegateEvents([name]);\n      } else if (Array.isArray(value)) {\n        node[lc] = e => value[0](value[1], e);\n      } else node[lc] = value;\n    } else if ((isChildProp = ChildProperties.has(prop)) || !isSVG && (isProp = Properties.has(prop)) || (isCE = node.nodeName.includes(\"-\"))) {\n      if (isCE && !isProp && !isChildProp) node[toPropertyName(prop)] = value;else node[prop] = value;\n    } else {\n      const ns = isSVG && prop.indexOf(\":\") > -1 && SVGNamespace[prop.split(\":\")[0]];\n      if (ns) setAttributeNS(node, ns, prop, value);else setAttribute(node, Aliases[prop] || prop, value);\n    }\n    prevProps[prop] = value;\n  }\n}\nfunction hydrate(code, element) {\n  hydration = globalThis._$HYDRATION || (globalThis._$HYDRATION = {});\n  hydration.context = {\n    id: \"0\",\n    count: 0,\n    registry: {}\n  };\n  const templates = element.querySelectorAll(`*[data-hk]`);\n  Array.prototype.reduce.call(templates, (memo, node) => {\n    const id = node.getAttribute(\"data-hk\"),\n          list = memo[id] || (memo[id] = []);\n    list.push(node);\n    return memo;\n  }, hydration.context.registry);\n  const dispose = render(code, element, [...element.childNodes]);\n  delete hydration.context;\n  return dispose;\n}\nfunction getNextElement(template, isSSR) {\n  const hydrate = hydration && hydration.context;\n  let node, key;\n  if (!hydrate || !hydrate.registry || !((key = getHydrationKey()) && hydrate.registry[key] && (node = hydrate.registry[key].shift()))) {\n    const el = template.cloneNode(true);\n    if (isSSR && hydrate) el.setAttribute(\"data-hk\", getHydrationKey());\n    return el;\n  }\n  if (hydration && hydration.completed) hydration.completed.add(node);\n  return node;\n}\nfunction getNextMarker(start) {\n  let end = start,\n      count = 0,\n      current = [];\n  if (hydration && hydration.context && hydration.context.registry) {\n    while (end) {\n      if (end.nodeType === 8) {\n        const v = end.nodeValue;\n        if (v === \"#\") count++;else if (v === \"/\") {\n          if (count === 0) return [end, current];\n          count--;\n        }\n      }\n      current.push(end);\n      end = end.nextSibling;\n    }\n  }\n  return [end, current];\n}\nfunction runHydrationEvents() {\n  if (hydration.events) {\n    const {\n      completed,\n      events\n    } = hydration;\n    while (events.length) {\n      const [el, e] = events[0];\n      if (!completed.has(el)) return;\n      eventHandler(e);\n      events.shift();\n    }\n  }\n}\nfunction toPropertyName(name) {\n  return name.toLowerCase().replace(/-([a-z])/g, (_, w) => w.toUpperCase());\n}\nfunction eventHandler(e) {\n  const key = `__${e.type}`;\n  let node = e.composedPath && e.composedPath()[0] || e.target;\n  if (e.target !== node) {\n    Object.defineProperty(e, \"target\", {\n      configurable: true,\n      value: node\n    });\n  }\n  Object.defineProperty(e, \"currentTarget\", {\n    configurable: true,\n    get() {\n      return node;\n    }\n  });\n  while (node !== null) {\n    const handler = node[key];\n    if (handler) {\n      const data = node[`${key}Data`];\n      data !== undefined ? handler(data, e) : handler(e);\n      if (e.cancelBubble) return;\n    }\n    node = node.host && node.host !== node && node.host instanceof Node ? node.host : node.parentNode;\n  }\n}\nfunction spreadExpression(node, props, prevProps = {}, isSVG, skipChildren) {\n  if (!skipChildren && \"children\" in props) {\n    (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(() => prevProps.children = insertExpression(node, props.children, prevProps.children));\n  }\n  (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(() => assign(node, props, isSVG, true, prevProps));\n  return prevProps;\n}\nfunction insertExpression(parent, value, current, marker, unwrapArray) {\n  while (typeof current === \"function\") current = current();\n  if (value === current) return current;\n  const t = typeof value,\n        multi = marker !== undefined;\n  parent = multi && current[0] && current[0].parentNode || parent;\n  if (t === \"string\" || t === \"number\") {\n    if (t === \"number\") value = value.toString();\n    if (multi) {\n      let node = current[0];\n      if (node && node.nodeType === 3) {\n        node.data = value;\n      } else node = document.createTextNode(value);\n      current = cleanChildren(parent, current, marker, node);\n    } else {\n      if (current !== \"\" && typeof current === \"string\") {\n        current = parent.firstChild.data = value;\n      } else current = parent.textContent = value;\n    }\n  } else if (value == null || t === \"boolean\") {\n    if (hydration && hydration.context && hydration.context.registry) return current;\n    current = cleanChildren(parent, current, marker);\n  } else if (t === \"function\") {\n    (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(() => {\n      let v = value();\n      while (typeof v === \"function\") v = v();\n      current = insertExpression(parent, v, current, marker);\n    });\n    return () => current;\n  } else if (Array.isArray(value)) {\n    const array = [];\n    if (normalizeIncomingArray(array, value, unwrapArray)) {\n      (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(() => current = insertExpression(parent, array, current, marker, true));\n      return () => current;\n    }\n    if (hydration && hydration.context && hydration.context.registry && current.length) return current;\n    if (array.length === 0) {\n      current = cleanChildren(parent, current, marker);\n      if (multi) return current;\n    } else {\n      if (Array.isArray(current)) {\n        if (current.length === 0) {\n          appendNodes(parent, array, marker);\n        } else reconcileArrays(parent, current, array);\n      } else if (current == null || current === \"\") {\n        appendNodes(parent, array);\n      } else {\n        reconcileArrays(parent, multi && current || [parent.firstChild], array);\n      }\n    }\n    current = array;\n  } else if (value instanceof Node) {\n    if (Array.isArray(current)) {\n      if (multi) return current = cleanChildren(parent, current, marker, value);\n      cleanChildren(parent, current, null, value);\n    } else if (current == null || current === \"\" || !parent.firstChild) {\n      parent.appendChild(value);\n    } else parent.replaceChild(value, parent.firstChild);\n    current = value;\n  } else console.warn(`Skipped inserting`, value);\n  return current;\n}\nfunction normalizeIncomingArray(normalized, array, unwrap) {\n  let dynamic = false;\n  for (let i = 0, len = array.length; i < len; i++) {\n    let item = array[i],\n        t;\n    if (item instanceof Node) {\n      normalized.push(item);\n    } else if (item == null || item === true || item === false) ; else if (Array.isArray(item)) {\n      dynamic = normalizeIncomingArray(normalized, item) || dynamic;\n    } else if ((t = typeof item) === \"string\") {\n      normalized.push(document.createTextNode(item));\n    } else if (t === \"function\") {\n      if (unwrap) {\n        while (typeof item === \"function\") item = item();\n        dynamic = normalizeIncomingArray(normalized, Array.isArray(item) ? item : [item]) || dynamic;\n      } else {\n        normalized.push(item);\n        dynamic = true;\n      }\n    } else normalized.push(document.createTextNode(item.toString()));\n  }\n  return dynamic;\n}\nfunction appendNodes(parent, array, marker) {\n  for (let i = 0, len = array.length; i < len; i++) parent.insertBefore(array[i], marker);\n}\nfunction cleanChildren(parent, current, marker, replacement) {\n  if (marker === undefined) return parent.textContent = \"\";\n  const node = replacement || document.createTextNode(\"\");\n  if (current.length) {\n    let inserted = false;\n    for (let i = current.length - 1; i >= 0; i--) {\n      const el = current[i];\n      if (node !== el) {\n        const isParent = el.parentNode === parent;\n        if (!inserted && !i) isParent ? parent.replaceChild(node, el) : parent.insertBefore(node, marker);else isParent && parent.removeChild(el);\n      } else inserted = true;\n    }\n  } else parent.insertBefore(node, marker);\n  return [node];\n}\n\nfunction renderToString(fn, options) {}\nfunction renderToNodeStream(fn) {}\nfunction renderToWebStream(fn) {}\nfunction ssr(template, ...nodes) {}\nfunction resolveSSRNode(node) {}\nfunction ssrClassList(value) {}\nfunction ssrStyle(value) {}\nfunction ssrSpread(accessor) {}\nfunction ssrBoolean(key, value) {}\nfunction escape(html) {}\nfunction generateHydrationScript(options) {}\n\nconst isServer = false;\nfunction Portal(props) {\n  const hydration = globalThis._$HYDRATION;\n  const {\n    useShadow\n  } = props,\n        marker = document.createTextNode(\"\"),\n        mount = props.mount || document.body;\n  function renderPortal() {\n    if (hydration && hydration.context) {\n      const [s, set] = (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(false);\n      queueMicrotask(() => set(true));\n      return () => s() && props.children;\n    } else return () => props.children;\n  }\n  if (mount instanceof HTMLHeadElement) {\n    let dispose;\n    const [clean, setClean] = (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(false);\n    const cleanup = () => {\n      setClean(true);\n      queueMicrotask(dispose);\n    };\n    (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.createRoot)(disposer => {\n      dispose = disposer;\n      insert(mount, () => !clean() && renderPortal()(), null);\n    });\n    (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(() => {\n      if (hydration && hydration.context) queueMicrotask(cleanup);else cleanup();\n    });\n  } else {\n    const container = props.isSVG ? document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\") : document.createElement(\"div\"),\n          renderRoot = useShadow && container.attachShadow ? container.attachShadow({\n      mode: \"open\"\n    }) : container;\n    Object.defineProperty(container, \"host\", {\n      get() {\n        return marker.parentNode;\n      }\n    });\n    insert(renderRoot, renderPortal());\n    mount.appendChild(container);\n    props.ref && props.ref(container);\n    (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(() => mount.removeChild(container));\n  }\n  return marker;\n}\nfunction Dynamic(props) {\n  const [p, others] = (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\"component\"]);\n  return (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(() => {\n    const comp = p.component,\n          t = typeof comp;\n    if (comp) {\n      if (t === \"function\") return (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.untrack)(() => comp(others));else if (t === \"string\") {\n        const el = document.createElement(comp);\n        spread(el, others);\n        return el;\n      }\n    }\n  });\n}\n\n\n\n\n//# sourceURL=webpack://hello-express/./node_modules/solid-js/web/dist/web.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/client.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;